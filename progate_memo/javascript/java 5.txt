コールバック関数
JavaScriptでは引数に関数を渡すことができます。
引数に渡される関数をコールバック関数と呼びます。

関数は、関数名の後ろに()をつけると呼び出され、()をつけなければ関数そのものを指します。
よって右の図のように、呼び出し方と渡し方で書き方が異なります。

const printWanko = () => {
  console.log("にんじゃわんこ");
};

// 関数callにcallbackという名前の引数を追加してください
const call = (callback) => {
  console.log("コールバック関数を呼び出します。");
  // 引数に渡したcallbackを呼び出してください
callback();
}; ↑ここをcallにしたら無限ループした
よくわからんがcallを定義しているやつの中に呼び出しがあるからcall呼び出し→call呼び出しってなっちゃったか
// 関数printWankoを引数に渡して関数callを実行してください
call(printWanko);


先程は事前に定義した関数をコールバック関数として渡しましたが、
関数を直接引数の中で定義することもできます。

const printWanko = () => {
  console.log("にんじゃわんこ");
};

const call = (callback) => {
  console.log("コールバック関数を呼び出します。");
  callback();
};

call(printWanko);

// 引数で関数を定義して渡してください
call(() => {
  console.log("ひつじ仙人");
});
ようわからんが省略できるってこと？前回はわざわざ定数を定義していたところを直接入力してるってことか

コールバック関数では、普通の関数と同じように引数を渡すことができます。


const call = (callback) => {
  callback("にんじゃわんこ", 14);
};

// 関数callの引数の中で2つの引数を取る関数を追加してください
call((name,age) => {
  console.log(`${name}は${age}歳です。`);
});


