繰り返し処理を行うためにはwhile文というものを用います。
whileとは「～の間」という意味の英語です。
while文は下の図のように書き、「条件式がtrueの間、{ }内の処理を繰り返す」ことができます。
 {}の後にセミコロンは不要です。


1から100まで数字を出力する例で、while文の書き方を見てみましょう。
まず、繰り返す部分の処理をwhileの「{ }」の中に書いていきます。
今回は左の図の緑の枠で囲んだ部分が繰り返すコードですので、while文では右の図のように書きます。

次に、「いつまで繰り返すか」を指定するための条件式を追加しましょう。
今回は「変数numberが100以下」の間に処理を繰り返したいので、左の図のような条件式を書きます。
まず条件式の判定が行われ、trueの時のみ{}の中で処理が1度実行されます。
その後、再び条件式がtrueかどうかチェックされ、trueであればもう一度処理が実行されます。

while文を用いる場合には、条件式の部分がいつかはfalseになり、
繰り返し処理が終わる必要があることに注意してください。
左の図では変数numberの値を更新するコードを書き忘れており、
これではいつまでも条件がtrueのままで、永遠に繰り返し処理が続いてしまいます。
（これを無限ループと呼びます。）

// 変数numberを定義してください
let number=1;

// while文を作成してください
while(number<=100){
  console.log(number);
  number+=1;
}
これで100までループする

for文では「変数の定義」「条件式」「変数の更新」の3つを括弧の中に書きます。
括弧の中ではそれぞれをセミコロン（;）で区切ります。
左の図がwhile文、右の図がfor文のコードになっています。
下線が引いてある部分を中心に、見比べてみましょう。

「number += 1」は「number ++」のように省略して書くことができます。
また、引き算の場合にも、「number -= 1」を「number --」と省略することができます。
while文やfor文では、この省略した書き方を使ってコードを短くすることができますので、
覚えておきましょう。
                                         ↓;はこれだけいらないみたい
for (let number= 1; number <= 100; number++) {
  console.log(number);
}

↓3の倍数を知らせるコード　
// for文を完成させてください
for (let number=1; number<=100; number++) {
  
  // if文を用いて、numberが3の倍数の時に「3の倍数です」、そうでないときは数字を出力してください
  if(number%3===0){←セミコロンついててエラー
    console.log("3の倍数です");
  }
  else{
    console.log(number);
  }
  
}

if文for文等は;いらない　for文時の++にもいらない


複数の値をまとめて管理するには、配列というものを用います。
配列は、[値1, 値2, 値3] のように作ります。配列に入っているそれぞれの値のことを要素と呼びます。
配列を使うと、右の図のように複数の文字列や数値をまとめて書くことができます。


配列も1つの値なので、定数に代入することができます。
このとき、配列を代入する定数名は、慣習上複数形にすることが多いので覚えておきましょう。
左の図のように、「console.log(定数名)」とすると、配列がコンソールに出力されます。

const animals=["dog","cat","sheep"];
　　　　　　  ↑[忘れずに
// 定数animalsを出力して下さい
console.log(animals);

配列の要素にはそれぞれインデックス番号という番号がついています。
インデックス番号は、0から始まることに注意しましょう。

// 配列の3つ目の要素を出力してください
console.log(animals[2]);

配列は左の図のように、要素に値を代入することでその要素を上書きすることができます。

animals[2]="rabbit";

// 配列animalsの3つ目の要素をコンソールに表示して下さい
console.log(animals[2]);

↓配列を繰り返すコード
for(let i=0; i<3; i++){
  console.log(animals[i]);
}

配列.lengthとすることで、配列の要素数を取得できます。
また、lengthを用いれば、前の演習のfor文の条件式を右の図のように書き換えることができます。
配列の要素数が変わっても問題なく繰り返すことができるので便利です。
これは配列の繰り返し処理でよく使う書き方ですので、覚えておきましょう。

console.log(animals.length);←要素の数が出力される

// lengthを用いて条件式を書き換えてください
for (let i = 0; i <animals.length; i++) {
  console.log(animals[i]);
}
↑lengthを使うことで数が分からなくても勝手に各名前を出力してくれた


ここからは、「オブジェクト」について学んでいきます。
オブジェクトは配列と同じく複数のデータをまとめて管理するのに用いられます。
配列は複数の値を並べて管理するのに対して、
オブジェクトはそれぞれの値にプロパティと呼ばれる名前をつけて管理します。

配列を作るときは[]で囲みましたが、オブジェクトは{}で囲みます。
プロパティ名と値の間はコロン（ : ）で繋ぎます。また、プロパティ間はコンマ（,）で区切ります。

// 定数characterを定義し、指定されたオブジェクトを代入してください

const character={name:"にんじゃわんこ",age:14}; character={name:"にんじゃわんこ",age:14};

// characterの値を出力してください
console.log(character);

オブジェクトの値を取り出すには、対応するプロパティ名を用いて 、
「オブジェクト.プロパティ名」のようにします。

const character = {name: "にんじゃわんこ", age: 14};

// characterのnameの値を出力してください
console.log(character.name);

// characterのageの値を「20」に更新してください
character.age=20;

// characterをコンソールに出力してください
console.log(character);

ここからは、オブジェクトを要素に持つ配列を見ていきましょう。
配列の要素には、文字列や数値だけでなく、オブジェクトも使うことができます。
その特性により、左の図のような配列を作ることができます。
その際、コードが横に長くなることを防ぐために、
右の図のように要素ごとに改行することがよくありますので、覚えておきましょう。

配列の要素には、先頭からインデックス番号が割り振られていることを思い出してください。
図のような配列では、配列の値がオブジェクトなので、
配列[インデックス番号]で対応するオブジェクトを取得することができます。

さらに、配列の中のオブジェクトのプロパティの値を取り出すには、
「配列[インデックス番号].プロパティ名」と書きます。
やや複雑になってきましたが、これまでの知識の組み合わせですので、
わからない箇所はこれまでのスライドで復習してみましょう。

const characters = [
  {name: "にんじゃわんこ", age: 14},　←オブジェクトごとに,付けるの忘れずに
  {name: "ひつじ仙人", age: 1000}
];

// charactersの1つ目の要素をコンソールに出力してください
console.log(characters[0]);

// charactersの2つ目の要素の「name」に対応する値をコンソールに出力してください
console.log(characters[1].name);


const characters = [
  {name: "にんじゃわんこ", age: 14},
  {name: "ひつじ仙人", age: 100},
  {name: "ベイビーわんこ", age: 5},
];

// for文を完成させてください
for (let i=0; i<characters.length; i++) {←　配列の要素数　つまり３回繰り返す
  console.log("--------------------");←文を分けて表示するための一文
  
  // 定数characterを定義してください
  const character=characters[i];←この一文がないと下は全部キャラクターズにして[i]をつける必要がある
  
  // 「名前は〇〇です」を出力してください
  console.log(`名前は${character.name}です`);←シングルクォーテーションはｐの隣のやつ
  　　　　　　　　　　　　　　↑キャラクターをつけずにミスった
  // 「〇〇歳です」を出力してください
   console.log(`${character.age}歳です`);
  
}

配列の存在しないインデックス番号の要素や、
オブジェクトの存在しないプロパティの要素を取得しようとすると、undefined と出力されます。
undefined は特別な値で、値が定義されていないことを意味します。

undefinedの時にいい感じの文章にするためのコード
  if(character.age===undefined){
    console.log("年齢は秘密です");
  }
  else{←if文が必要な時はelseも必要そう
     console.log(`${character.age}歳です`);
  }

オブジェクトの値の部分には、文字列や数値だけでなく、
オブジェクトを用いることができます。以下の図では、
「character」というオブジェクトの「favorite」プロパティに対応する値に、
オブジェクトを用いています。

このようなオブジェクトは、
「オブジェクト名.プロパティ.プロパティ」のように呼び出します。
左の図の定数characterというオブジェクトの中のfoodの値を呼び出すには、
「character.favorite.food」と指定します。

const cafe = {
  name: "Progateカフェ",
  businessHours: {
    // businessHoursの値に指定されたオブジェクトを代入してください
    opening:"10:00(AM)",
    closing:"8:00(PM)"
  }
};

// 「店名:〇〇」を出力してください
console.log(`店名:${cafe.name}`);

// 「営業時間:〇〇から△△」を出力してください
console.log(`営業時間:${cafe.businessHours.opening}から${cafe.businessHours.closing}`);

最後に、カフェにオススメのメニュー情報を追加します。
以下の図のように、オブジェクトの値には配列を用いることもできます。


const cafe = {
  name: "Progateカフェ",
  businessHours: { 
    opening: "10:00(AM)",
    closing: "8:00(PM)"
  },
  // menusプロパティに配列を代入してください
  menus:["コーヒー","紅茶","チョコレートケーキ"]←｛｝になっててエラー
  
};

console.log(`店名: ${cafe.name}`);
console.log(`営業時間:${cafe.businessHours.opening}から${cafe.businessHours.closing}`);
console.log(`----------------------------`);
console.log("おすすめメニューはこちら");

// for文を用いて配列menusの中身を表示させてください
for(let i=0; i<cafe.menus.length; i++){
console.log(cafe.menus[i]);
}