メディアクエリの書き方を見てみましょう。
メディアクエリは、@media (条件) { .... }という様に書きます。
指定された条件が当てはまるときにのみ{ }内のCSSが適用されます。

メディアクエリの条件には、max-width(最大幅)、
またはmin-width(最小幅)を指定できます。
max-width: ◯◯pxと指定すると、
画面幅が◯◯px以下の時にCSSを適用できます。min-widthはその反対となります。


max-width: ◯◯px（またはmin-width: ◯◯px）のようにメディアクエリの条件を指定するとき、
「◯◯px」の部分をブレイクポイントと呼びます。
今回はスマートフォンの画面幅は670px以下、タブレットの画面幅は670px ~ 1000pxと想定して、
ブレイクポイントを設定しましょう。

h1 {
  color: red;
}

/* ブレイクポイントをmax-width: 1000pxに指定してください */
@media (max-width:1000px) {
  /* h1のcolorをblueに指定してください */
 h1{ color: blue;
 }
}

/* ブレイクポイントをmax-width: 670pxに指定してください */
@media (max-width:670px) {
  /* h1のcolorをgreenに指定してください */
  h1{
    color:green;
  }
  
}

↓大きさを変えるのは
@media(max-width:1000px){
  .item{
    width:50%;
  }
}


先ほどの演習で作成したitemクラスに、paddingを加えたものが左下の画像です。
itemクラスのwidthが25%で指定されているため、
左右のpaddingを追加すると要素の幅の合計が100%を超えてしまい、レイアウトが崩れてしまっています。
このようなレイアウト崩れは、box-sizing: border-box;を用いることで防ぐことができます。

box-sizingをborder-boxに指定すると、
要素の幅(width)の合計にpaddingとborderが含まれるようになります。
そのため、paddingやborderを追加した時に生じるレイアウト崩れを未然に防ぐことができます
（※ただし、marginはborder-boxでの合計値に含まれません）。

box-sizing: border-box;を指定するときは、*(アスタリスク)に対して指定することが推奨されています。
*はすべての要素に対してCSSを適用したい場合に用います。
border-boxをすべての要素に対して適用することで、レイアウトを管理しやすくなります。

*{
  box-sizing:border-box;
}


レスポンシブデザインを適用する準備として、<head>タグ内にviewportを設定しましょう。
viewportを設定しないと、スマートフォンやタブレットでの閲覧時にメディアクエリが正しく機能しません。
ただし、ここでviewportの中身の書き方を暗記する必要はありません。


HTML中級編では、全体のwidthを1170pxで固定していました。
これでは、スマートフォンなどの小さい画面でも、widthが1170pxのままになってしまいます。
画面幅によって全体のwidthが変わるように、width: 100%;に変更しましょう。
*{
  box-sizing:border-box;
}
.container {
  /* widthを100%にしてください */
  width: 100%;
  padding: 0 15px;
  margin: 0 auto;
}

    <meta name="viewport" content="width=device-width, initial-scale=1.0">
暗記する必要はないらしい



stylesheet.cssにメディアクエリ用のCSSを記述しても問題ありませんが、
整理しやすいように今回はCSSファイルを分割し、
responsive.cssにメディアクエリ用のCSSを記述していきます。
このresponsive.cssを読み込む際には、必ずviewportよりも下の行に記述するようにしましょう。

CSSを読み込むためのコード
    <link rel="responsive" href="responsive.css">

先ほどの演習で、背景色が途中で切れてしまうという問題が生じました。
これはlesson-wrapper要素の高さが580pxに固定されているためです。
高さがコンテンツの中身によって変わるように、この指定を消しましょう。

通常、親要素の高さは子要素を包む高さとなります。
しかし、子要素が全てfloatの時、親要素の高さは0となってしまうという性質があります。
これは、floatは「浮いている」という意味で、
親要素から見るとfloatの子要素は存在しないように見えるからです。

子要素が全てfloatでも、親要素が高さを持つように設定してみましょう。
floatはclear: left;で「浮いている」状態を解除できます。
ここではclear: left;を適用するためだけの空のタグを用意しましょう。
空タグとclearでfloatを解除するのはよく使うテクニックなので、覚えておくようにしましょう。

.clear{
  clear:left;
}

中央寄せコード
  footer{
    text-align:center;
  }

container要素のwidthが100%なので、
画面幅が2000pxなどとても大きい時も画面いっぱいに広がってしまいます。
max-width: ◯◯px;と指定すると、画面幅を拡大しても、要素の幅の上限が◯◯pxとなります。


メニューアイコンはデフォルトでは非表示にし、
画面幅が670px以下（スマートフォンサイズ）の時にのみ表示されるようにします。
要素を非表示にするにはdisplay: none;を用います。
非表示にした要素を表示させる時は、display: block;を用いて表示します。

引数（ひきすう）とは関数に与える追加情報のようなものです。
関数を呼び出すときに一緒に値を渡すことで、関数の中でその値を利用することができます。

それでは、引数を受け取る関数を定義してみましょう。
図のように、「(引数名) =>」と括弧の中に引数名を書くことで
引数を受け取ることができます。

引数を受け取る関数を呼び出すには、「定数名(値)」と書きます。
関数は指定した値を受け取り、その値は引数に代入されます。
右の図では、introduceの呼び出し時に「"にんじゃわんこ"」という値が渡され、
引数nameに代入されています。

// 関数の引数にnameを追加してください
const greet = (name) => {
  // 「こんにちは、〇〇さん」となるように出力してください
  console.log(`こんにちは、${name}さん`);
  ↑普通にコンソールログでした　greetにしてミス
};

// greetの引数に「ひつじ仙人」を渡して呼び出してください
greet("ひつじ仙人");
