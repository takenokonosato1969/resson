<div class="header">と<div class="footer">のような、
ヘッダーとフッターのためのタグは非常によく使われるので、
HTMLは<header>と<footer>というタグが用意されています。
<header>, <footer>を使う方が一般的なので、こちらを使いましょう。

トップ部分の背景には画像を表示します。
CSSで背景画像を指定するにはbackground-imageプロパティを用います。
background-image: url(画像のURL);のように使います。

background-imageで指定された背景画像は図のように表示範囲を埋め尽くすまで、
繰り返し表示される性質があります。
background-size: cover;を指定すると、
1枚の画像で表示範囲を埋め尽くすように画像の大きさが拡大縮小します。


containerクラスを中央寄せにしましょう。
中央に寄せるためにはmarginの左右にautoを指定します。
marginにautoを指定するときは、必ずwidthを併せて指定します。
なお、上下のmarginにautoを指定することはできません。
このようなcontainerクラスを作る意味は今は理解しなくて大丈夫です。
後に便利になるので、作っておきましょう。

↓パッディングの上下指定
.container{
  width:1170px;
  padding:0px 15px;
  margin:auto;
}

.top-wrapper{
  padding:180px 0px 100px 0px;　←　パッディングの四方指定
  color:white;
  background-image:url(https://prog-8.com/images/html/advanced/top.png);　←画像貼り付け
  background-size:cover;　←画像の範囲埋め尽くし拡大修正

opacityプロパティを使えば要素を透明にできます。
透明度は0.0(完全に透明) ~ 1.0(完全に不透明)の数値で指定します。

letter-spacingプロパティを用いることで文字の間隔を指定することができます。


.top-wrapper h1{
  opacity:0.7;　←透明度
  font-size:45px;
  letter-spacing:5px; ←文字の間隔
}


ボタンを作っていきます。ボタンは<a>タグで指定します。
しかし<a>タグはインライン要素であり、
インライン要素にはwidthやheightが指定できないなど不便な点があります。
これを解決する方法を学びましょう。

ブロック要素とインライン要素の特徴を併せ持つインラインブロック要素というものがあります。
インラインブロック要素はインライン要素と同様に横に並びますが、
ブロック要素のように幅や高さをもちます。

<a>タグは初期状態でインライン要素になっていますが、displayプロパティを使うと、
インラインブロック要素に変更することができます。
displayプロパティはblock（ブロック要素）,
 inline-block（インラインブロック要素）, inline（インライン要素）を指定することができます。

　　　　　　↓クラスの二度付けが可
a class="btn signup" href="#">新規登録はこちら</a>

カーソルが乗ったときの状態をhoverと言います。
CSSで、セレクタ:hoverとすることで、
カーソルが乗ったときのCSSを指定することができます。
　　　　　　　↓:な
.header-right:hover{
background-color:rgba(255, 255, 255, 0.5);  
}

角を丸めるにはborder-radiusプロパティを用います。
数字が大きいほど角が丸くなります。

text-alignプロパティを用いることで、
テキスト、インライン要素、インラインブロック要素の配置を指定することができます。
leftで左寄せ、centerで中央揃え、rightで右寄せに設定することができます。

要素を中央寄せにする方法として、margin: 0 autoとtext-align: centerを学びましたが、
それらの違いを整理しましょう。
containerクラスのように、広い範囲を囲うようなブロック要素の場合はmarginを、
テキストやボタンのような
インライン要素・インラインブロック要素の場合はtext-alignを使うようにしましょう。

ブロック要素は　要は改行しているということ
 text-align:center;

インライン要素改行しない
でも色々設定できないからインラインブロック要素というものがある


アイコンを表示するにはFont Awesomeというものを使うと便利です。
たくさんのアイコンが用意されており、自分の気に入ったアイコンを簡単に使うことが出来ます。
https://fontawesome.com に詳しい使い方やアイコンの一覧が載っています。


Font Awesomeは、以下の手順で使用することができます。
①Font AwesomeのCSSファイルを読み込む
②<span>タグにfaクラスとfa-アイコン名クラスを指定する
（Font Awesomeのサイトにアイコンごとのクラス名が載っています。）
これだけで簡単にアイコンを表示させることができます。

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="stylesheet.css">
　　↑フォントのサイトを読み込むコードだけどコピペさせられたから重要じゃない？

    <span class="fa fa-twitter"></span>
　　　↑これでアイコン読み込めた

そもそもspanとは？
spanタグとは、汎用的なhtmlタグで、
囲んだ要素を強調するなどのデザイン微調整によく利用されるタグ

divとspanの違いは？
ではdivとspanの違いは何なのでしょうか。
少しむずかしい説明をすると「2つタグの違い」＝「displayというCSSのプロパティの値の違い」なのです。

div⇒display: blockとなっている
span⇒display: inlineとなっている



これまで要素を透明にするにはopacityを用いてきました。
しかし、opacityには要素の中身全てを透明にするという性質があります。背景色のみを透明にするには、rgbaというものを使う必要があります。
それを学んでいきましょう。

rgbaを学ぶには、まずrgbというものを理解する必要があります。
rgbは色の指定の仕方の1つで、3つの値の組み合わせで表示する色を決めます。
色を指定するときは今まで使用してきた#ffffffのような記法を使ってもrgbを使っても構いません。

色を透明にしたいときは色をrgbaで指定します。
rgbaは4つの値をコンマ（,）区切りで入れます。
4つ目の値が透明にする度合いで、0 ~ 1の数値で指定します（値が小さいほど透明になります）。
opacityプロパティは要素全体を透過させますが、rgbaを使うとその色だけを透明にすることが出来ます。

header{　←ヘッダータグに.はいらないらしい　.つけるのはクラスだけか
  height:65px;
  background-color:rgba(34, 49, 52, 0.9);←0.9が背景の透明度
}


transitionを使うとアニメーションをつけることができます。
「変化の対象」や、「変化にかかる時間」などを指定できます。
「変化の対象」にはcolorなどのプロパティを指定しますが、allを指定すると全てのプロパティに適用出来ます。
transitionは多くの場合hoverと組み合わせて使います。

line-heightプロパティを使うと、行の高さを指定することができます。
値が大きいほど行間が大きくなります。

line-heightプロパティは本来行間を調整するためのプロパティですが、
要素の縦方向の中央に文字を配置するのにも使えます。
line-heightプロパティの「高さの中心」に文字が配置されるため、
要素の高さとline-heightプロパティを同じ値にすると、文字がちょうど中央に配置されるようになります。

<a>タグはインライン要素なので、
中身のテキストの部分しか大きさを持ちません。
その結果、<a>タグをクリックできる範囲はテキストの部分だけになってしまいます。
<a>タグをブロック要素にすると、大きさが親要素いっぱいに広がるので、
全体をクリックできるようになります。

css
transition:all 0.5s;←アニメーション　何秒かけて色が変わるか

display:block;　←インライン要素をブロック要素に変える


font-weightプロパティを用いると文字の太さを変更することができます。
normalまたはboldを指定します。
<h1>~<h6>の要素は初期状態でfont-weight: bold;となっているので、
font-weight: normal;と指定すれば文字が細くなります。

.heading h2{
  font-weight:normal; ←細くなった？

ボックスのwidthやheightをpxではなく%で指定すると、
親要素に対してどのくらいの幅や高さを持つか指定することができます。


          <div class="lesson">
          <div class="lesson-icon">
          <img src="https://prog-8.com/images/html/advanced/html.png"><p></p>
          </div>
          <p class="txt-contents"></p>
          </div>　　×4
どうして横並びになるのか
どうして１つのdivにまとめたら縦に並ぶのか　まだ理解できていない

.lesson{
  float:left;
  width:25%;


HTMLの要素同士は通常重なって表示されることはありませんが、
position: absolute;を使うと、要素同士を重ねて表示することが出来ます。
サイト全体の左上部分を基準とし、そこからの位置をtopとleftを用いて指定します。
また、rightやbottomを併用することも可能です。


.lesson-icon{
  position:relative;
}　　親要素の決定


.lesson-icon p{
  position:absolute;
  top:90px;
  width:100%;
  color:white;
}　親を基準に子要素を調整



ボックスに影を付けるためにはbox-shadowプロパティを用います。
以下の図のように「影の位置」と「影の色」を指定します。

水平　垂直　色の順番
  box-shadow:0 7px #1a7940;


セレクタにactiveを用いることで、要素がクリックされている間だけCSSを適用することができます。
セレクタ:activeというように指定します。

box-shadow: none;とすると、影を消すことが出来ます。
このように多くのプロパティはnoneを指定することによって消すことができます。

要素の位置を変更する方法を学びましょう。
前回position: relative;はposition: absolute;の基準位置を決めるために使っていましたが、
要素の位置を変更するためにも使うことが出来ます。
position: relative;をtopやleftと併用すると、その要素を本来の位置からずらせます。

クリック時に、以下の処理をすることによって、ボタンがへこんで見えるようになります。
・box-shadowをnoneにする
・position: relative;とtopによって影の分だけ位置を下げる


<footer>の中の<img>のwidthを125pxにしてください。
ただし<footer>タグはクラスではないので、
CSSにおいて.をつけないことに注意してください。
footer img{
  width:125px;
}

position: fixed;を使うと、常に要素を画面上の指定した位置に固定させておくことができます。
位置は、top、left、right、bottomを使って指定します。

positionを使用すると要素の重なりが生じます。
その結果図のように、レッスン紹介部分とヘッダーが重なった時に、ヘッダーが隠れてしまいます。
重なり順を指定して、ヘッダーが上に表示されるようにしましょう。
  position:fixed;
  top:0px; 上との距離

z-indexプロパティは、要素の重なりの順序を指定する際に使用します。
z-indexは整数値で指定し、値が大きいほど上に表示されます。
z-indexプロパティは必ずpositionプロパティと併用する必要があるので、注意しましょう。

  z-index:10;

